import 'package:flutter/material.dart';
void main(){
  runApp(
    const MaterialApp(
      home: Page1(),
      debugShowCheckedModeBanner: false,
    )
  );
}
class Page1 extends StatelessWidget {
  const Page1({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("COMP-2430-SDE"),
      ),
      body: Center(
        child: new Row(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
            ElevatedButton(
              onPressed: (){
                Navigator.of(context).push(_createRoute());
              },
              child: const Text('male'),
              style: ButtonStyle(
                textStyle: MaterialStateProperty.all(
                    TextStyle(
                        fontSize: 50
                    )
                ),
                foregroundColor: MaterialStateProperty.resolveWith((states) {
                  if(states.contains(MaterialState.pressed)){
                    return Colors.black;
                  }
                  return Colors.white;
                }),
                backgroundColor: MaterialStateProperty.resolveWith((states) {
                  if(states.contains(MaterialState.pressed)){
                    return Colors.blueGrey;
                  }
                  return Colors.blue;
                }),
                shadowColor: MaterialStateProperty.all(Colors.blueAccent),
                elevation: MaterialStateProperty.all(10),
                side:MaterialStateProperty.all(
                    BorderSide(
                      color: Colors.white,
                      width: 1,
                    )
                ),
                shape: MaterialStateProperty.all(
                    CircleBorder(
                        side: BorderSide(
                          color: Colors.white10,
                          width:1,
                        )
                    )
                ),
                minimumSize: MaterialStateProperty.all(Size(150,150)),
                overlayColor: MaterialStateProperty.all(Colors.blueAccent),
              ),
            ),

            ElevatedButton(
              onPressed: (){
                Navigator.of(context).push(_createRoute1());
              },
              child: const Text('female'),
              style: ButtonStyle(
                textStyle: MaterialStateProperty.all(
                    TextStyle(
                        fontSize: 45
                    )
                ),
                foregroundColor: MaterialStateProperty.resolveWith((states) {
                  if(states.contains(MaterialState.pressed)){
                    return Colors.black;
                  }
                  return Colors.white;
                }),
                backgroundColor: MaterialStateProperty.resolveWith((states) {
                  if(states.contains(MaterialState.pressed)){
                    return Colors.blueGrey;
                  }
                  return Colors.blue;
                }),
                shadowColor: MaterialStateProperty.all(Colors.blueAccent),
                elevation: MaterialStateProperty.all(10),
                side:MaterialStateProperty.all(
                    BorderSide(
                      color: Colors.white,
                      width: 1,
                    )
                ),
                shape: MaterialStateProperty.all(
                    CircleBorder(
                        side: BorderSide(
                          color: Colors.white10,
                          width:1,
                        )
                    )
                ),
                minimumSize: MaterialStateProperty.all(Size(150,150)),
                overlayColor: MaterialStateProperty.all(Colors.blueAccent),
              ),
            ),
          ],
        )


      ),
    );
  }
}
Route _createRoute(){
  return PageRouteBuilder(
    pageBuilder: (context, animation, secondaryAnimation) => const male(),
    transitionsBuilder: (context,animation, secondaryAnimatioin,child){
      return child;
    },
  );
}
Route _createRoute1(){
  return PageRouteBuilder(
    pageBuilder: (context, animation, secondaryAnimation) => const female(),
    transitionsBuilder: (context,animation, secondaryAnimatioin,child){
      return child;
    },
  );
}
class male extends StatefulWidget {
  const male({Key? key}) : super(key: key);
  @override
  State<male> createState() => _maleState();
}

class _maleState extends State<male> {

    final _heightController = TextEditingController();
    final _weightController = TextEditingController();
    double? _bmi;
    String _message = 'enter your height an weight';

    void _calculate() {
      final double? height = double.tryParse(_heightController.value.text);
      final double? weight = double.tryParse(_weightController.value.text);

      if (height == null || height <= 0 || weight == null || weight <= 0) {
        setState(() {
          _message = "Your height and weigh must be positive numbers";
        });
        return;
      }

      setState(() {
        _bmi = weight / (height * height);
        if (_bmi! < 18.5) {
          _message = "underweight";
        } else if (_bmi! < 25) {
          _message = 'fine';
        } else if (_bmi! < 30) {
          _message = 'overweight';
        } else {
          _message = 'obese';
        }
      });
    }

    @override
    Widget build(BuildContext context) {
      return Scaffold(
          backgroundColor: Colors.deepOrange,
          body: Center(
            child: Container(
              width: 320,
              child: Card(
                color: Colors.white,
                elevation: 10,
                child: Padding(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        keyboardType:
                        TextInputType.numberWithOptions(decimal: true),
                        decoration: InputDecoration(labelText: 'Height (m)'),
                        controller: _heightController,
                      ),
                      TextField(
                        keyboardType:
                        TextInputType.numberWithOptions(decimal: true),
                        decoration: InputDecoration(
                          labelText: 'Weight (kg)',
                        ),
                        controller: _weightController,
                      ),
                      TextField(
                        keyboardType:
                        TextInputType.numberWithOptions(decimal: true),
                        decoration: InputDecoration(labelText: 'age'),
                      ),
                      ElevatedButton(
                        onPressed: _calculate,
                        child: Text('Calculate'),
                      ),
                      SizedBox(
                        height: 30,
                      ),
                      Container(
                        child: Text(
                          _bmi == null ? 'No Result' : _bmi!.toStringAsFixed(2),
                          style: TextStyle(fontSize: 50),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      SizedBox(
                        height: 20,
                      ),
                      Container(
                        child: Text(
                          _message,
                          textAlign: TextAlign.center,
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ),
          ));
    }
  }


class female extends StatefulWidget {
  const female({Key? key}) : super(key: key);

  @override
  State<female> createState() => _femaleState();
}

class _femaleState extends State<female> {
  final _heightController = TextEditingController();
  final _weightController = TextEditingController();
  double? _bmi;
  String _message = 'enter your height an weight';

  void _calculate() {
    final double? height = double.tryParse(_heightController.value.text);
    final double? weight = double.tryParse(_weightController.value.text);


    if (height == null || height <= 0 || weight == null || weight <= 0) {
      setState(() {
        _message = "Your height and weigh must be positive numbers";
      });
      return;
    }

    setState(() {
      _bmi = weight / (height * height);
      if (_bmi! < 18.5) {
        _message = "underweight";
      } else if (_bmi! < 25) {
        _message = 'fine';
      } else if (_bmi! < 30) {
        _message = 'overweight';
      } else {
        _message = 'obese';
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.lightBlueAccent,
        body: Center(
          child: Container(
            width: 320,
            child: Card(
              color: Colors.white,
              elevation: 10,
              child: Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      keyboardType:
                      TextInputType.numberWithOptions(decimal: true),
                      decoration: InputDecoration(labelText: 'Height (m)'),
                      controller: _heightController,
                    ),
                    TextField(
                      keyboardType:
                      TextInputType.numberWithOptions(decimal: true),
                      decoration: InputDecoration(
                        labelText: 'Weight (kg)',
                      ),
                      controller: _weightController,
                    ),
                    TextField(
                      keyboardType:
                      TextInputType.numberWithOptions(decimal: true),
                      decoration: InputDecoration(labelText: 'age'),
                    ),
                    ElevatedButton(
                      onPressed: _calculate,
                      child: Text('Calculate'),
                    ),
                    SizedBox(
                      height: 30,
                    ),
                    Container(
                      child: Text(
                        _bmi == null ? 'No Result' : _bmi!.toStringAsFixed(2),
                        style: TextStyle(fontSize: 50),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    SizedBox(
                      height: 20,
                    ),
                    Container(
                      child: Text(
                        _message,
                        textAlign: TextAlign.center,
                      ),
                    )
                  ],
                ),
              ),
            ),
          ),
        ));
  }
}

